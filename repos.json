{
  "Data": {
    "RepositoryOwner": {
      "Repositories": {
        "Edges": [
          {
            "Node": {
              "Name": "ANTLERParser",
              "Url": "https://github.com/go-sqlparser/ANTLERParser",
              "Description": "DOT, DOTPrettyPrintListener",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Java"
              }
            }
          },
          {
            "Node": {
              "Name": "antlr4",
              "Url": "https://github.com/go-sqlparser/antlr4",
              "Description": "ANTLR (ANother Tool for Language Recognition) is a powerful parser generator for reading, processing, executing, or translating structured text or binary files.",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Java"
              }
            }
          },
          {
            "Node": {
              "Name": "antlr4-demo",
              "Url": "https://github.com/go-sqlparser/antlr4-demo",
              "Description": "antlr4 go语言的demo",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "antlr4-grammars",
              "Url": "https://github.com/go-sqlparser/antlr4-grammars",
              "Description": "Precompiled Go versions of most of the grammars on https://github.com/antlr/grammars-v4.",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "blog-code",
              "Url": "https://github.com/go-sqlparser/blog-code",
              "Description": "A place to store source code that is relevant to my blog posts.",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "compiler",
              "Url": "https://github.com/go-sqlparser/compiler",
              "Description": "Example of Rob Pike's Lexical Scanning in Go",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "current",
              "Url": "https://github.com/go-sqlparser/current",
              "Description": "Current Collections",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "dot4j",
              "Url": "https://github.com/go-sqlparser/dot4j",
              "Description": "A Java library for GraphViz DOT which enables both read and write of DOT files",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Java"
              }
            }
          },
          {
            "Node": {
              "Name": "erd-go",
              "Url": "https://github.com/go-sqlparser/erd-go",
              "Description": "Translates a plain text description of a relational database schema to a graphical entity-relationship diagram.(convert to dot file)",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "gisp",
              "Url": "https://github.com/go-sqlparser/gisp",
              "Description": "Simple LISP in Go",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "go-antlr-collections",
              "Url": "https://github.com/go-sqlparser/go-antlr-collections",
              "Description": "Go ANTLR Misc Code Collections",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Java"
              }
            }
          },
          {
            "Node": {
              "Name": "go-antlr-practices",
              "Url": "https://github.com/go-sqlparser/go-antlr-practices",
              "Description": "Go ANTLR Practice Code",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "go-lexer",
              "Url": "https://github.com/go-sqlparser/go-lexer",
              "Description": "Lexer based on Rob Pike's talk on YouTube (view README)",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "goadvent-antlr",
              "Url": "https://github.com/go-sqlparser/goadvent-antlr",
              "Description": "Examples from my goadvent blog post",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "GoPlayWithCompiler",
              "Url": "https://github.com/go-sqlparser/GoPlayWithCompiler",
              "Description": "编译原理之美-宫文学 golang实现版本",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "goyacc-sample",
              "Url": "https://github.com/go-sqlparser/goyacc-sample",
              "Description": "goyacc sample",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "GraphVizDotToDatabaseParsing",
              "Url": "https://github.com/go-sqlparser/GraphVizDotToDatabaseParsing",
              "Description": "GVA System, Graphviz Analyer System, from a Graphviz file to output the underlying feature of the graph.",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Python"
              }
            }
          },
          {
            "Node": {
              "Name": "jsonpath",
              "Url": "https://github.com/go-sqlparser/jsonpath",
              "Description": "jsonpath cli in Go",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "LanguageWithGoAndAntlr",
              "Url": "https://github.com/go-sqlparser/LanguageWithGoAndAntlr",
              "Description": " 算术运算, 比较操作, 逻辑运算/语句",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "leg",
              "Url": "https://github.com/go-sqlparser/leg",
              "Description": "Leg grammar in Go, derived from Peg",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "lexer",
              "Url": "https://github.com/go-sqlparser/lexer",
              "Description": "Example of Rob Pike's Lexical Scanning in Go on JavaScript",
              "PrimaryLanguage": {
                "PrimaryLanguage": "JavaScript"
              }
            }
          },
          {
            "Node": {
              "Name": "minio",
              "Url": "https://github.com/go-sqlparser/minio",
              "Description": "High Performance, Kubernetes Native Object Storage",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "mson",
              "Url": "https://github.com/go-sqlparser/mson",
              "Description": "A parser for MongoDB shell \"dumps\"",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "peg",
              "Url": "https://github.com/go-sqlparser/peg",
              "Description": "Peg, Parsing Expression Grammar, is an implementation of a Packrat parser generator.",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "Petri-Nets-Visualisation",
              "Url": "https://github.com/go-sqlparser/Petri-Nets-Visualisation",
              "Description": "Dot file parser in C#",
              "PrimaryLanguage": {
                "PrimaryLanguage": "C#"
              }
            }
          },
          {
            "Node": {
              "Name": "pgoparser",
              "Url": "https://github.com/go-sqlparser/pgoparser",
              "Description": "PostgreSQL parser written in pure go.",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "PlayAST",
              "Url": "https://github.com/go-sqlparser/PlayAST",
              "Description": "抽象语法树的设计与实现 ( PlayAST : Play With Abstract Syntax Tree )",
              "PrimaryLanguage": {
                "PrimaryLanguage": "JavaScript"
              }
            }
          },
          {
            "Node": {
              "Name": "pling",
              "Url": "https://github.com/go-sqlparser/pling",
              "Description": "build mode from PL/SQL file.",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "simplelang",
              "Url": "https://github.com/go-sqlparser/simplelang",
              "Description": "Simple programming language created using antlr4 and llvm",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "sprocbind",
              "Url": "https://github.com/go-sqlparser/sprocbind",
              "Description": "Generates Golang bindings to MSSQL stored procedures, including TVP",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "sql",
              "Url": "https://github.com/go-sqlparser/sql",
              "Description": "Package sql provides a meta-model and parsers for different sql dialects.",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "sql-parser",
              "Url": "https://github.com/go-sqlparser/sql-parser",
              "Description": "A Go library for lexing and parsing SQL strings and streams",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "sql-to-gorm",
              "Url": "https://github.com/go-sqlparser/sql-to-gorm",
              "Description": "Convert create table sql to a gorm struct. 将建表sql转换为gorm的结构。",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "sqlfun",
              "Url": "https://github.com/go-sqlparser/sqlfun",
              "Description": "Modern SQL parser using Bison (Yacc) and Flex",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Yacc"
              }
            }
          },
          {
            "Node": {
              "Name": "sqlgparser",
              "Url": "https://github.com/go-sqlparser/sqlgparser",
              "Description": "SQLite or SQL-92 Parser implemented in Go",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "sqlpparser",
              "Url": "https://github.com/go-sqlparser/sqlpparser",
              "Description": "A simple (limited) SQL Parser in Peg",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "SQLServerMetadata",
              "Url": "https://github.com/go-sqlparser/SQLServerMetadata",
              "Description": "SQL Server Metadata Toolkit",
              "PrimaryLanguage": {
                "PrimaryLanguage": "C#"
              }
            }
          },
          {
            "Node": {
              "Name": "sqlvalidator",
              "Url": "https://github.com/go-sqlparser/sqlvalidator",
              "Description": "Validates SQL against different dialects",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "te",
              "Url": "https://github.com/go-sqlparser/te",
              "Description": "Package te implements temporal expressions.",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "vitess-sqlparser",
              "Url": "https://github.com/go-sqlparser/vitess-sqlparser",
              "Description": "simply SQL Parser for Go ( powered by vitess and TiDB )",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          },
          {
            "Node": {
              "Name": "yacc-examples",
              "Url": "https://github.com/go-sqlparser/yacc-examples",
              "Description": "this is a example for goyacc to parse json",
              "PrimaryLanguage": {
                "PrimaryLanguage": "Go"
              }
            }
          }
        ]
      }
    }
  }
}